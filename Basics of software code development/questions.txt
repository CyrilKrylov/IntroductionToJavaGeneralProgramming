1. Объясните, что имеется в виду, когда говорится: Java-язык программирования и Java-платформа:

 - Java как язык программирования является высокоуровневым, (с 1x версии динамичеки типизированный)статически-типизированным и объектно-ориентированным.
 - Java как платформа — это программное обеспечение, представляющее собой рабочую среду для работы программ, написанных
на Java (и не только Scala,Clojure,Groovy). Она состоит из Java API и Java виртуальной машины (JVM).

2. Поясните, как связаны имя java-файла и классы, которые в этом файле объявляются:

 Имя java файла должно полностью совпадать с названием public класса в файле, иначе если public класса нет, то с
 названием любого класса в файле

3. Расшифруйте аббревиатуры JVM, JDK и JRE; покажите, где “они находятся” и что собой представляют:

 Java программы выполняются (или интерпретируются) другой программой, называемой JVM (Java Virtual Machine).
 Она не интерпретирует напрямую исходный Java код, вместо этого java код должен быть скомпилирован в .class файлы
 (или байт-код), формат которых не является удобным для чтения человеком, но это и не машинный код.
 Технически байт-код — это промежуточный язык, или Intermediate language
 JVM (Java Virtual Machine) - виртуальная машина Java - основная часть исполняющей системы Java, так называемой
 Java Runtime Environment (JRE). Виртуальная машина Java исполняет байт-код Java, предварительно созданный из исходного
 текста Java-программы компилятором Java (javac). JVM обеспечивает платформо-независимый способ выполнения кода.
 Программисты могут писать код не задумываясь как и где он будет выполняться.

 JRE (Java Runtime Environment) - минимальная реализация виртуальной машины, необходимая для исполнения Java -приложений,
  без компилятора и других средств разработки. Состоит из виртуальной машины и библиотек Java классов.

 JDK (Java Development Kit) - комплект разработчика приложений на языке Java, включающий в себя компилятор, стандартные
 библиотеки классов Java, примеры, документацию, различные утилиты и исполнительную систему JRE.

4. Объясните, как скомпилировать и запустить приложение из командной строки, а также зачем в переменных
   среды окружения прописывать пути к установленному jdk :

 По умолчанию компилятор записывает сгенерированный .class в тот же каталог, где находится исходный класс .java.
 Это хорошо для маленьких проектов, но при работе на больших проектах файлы .java и .class должны храниться отдельно.
 Ключ -d позволяет указать компилятору, куда записывать сгенерированные .class файлы.
   cd project1
   javac -d classes src/MyFirstApp.java  --- находясь в папке  project1 которая содержит папки src и classes компилируем
   файл MyFirstApp.java из папки src в файл MyFirstApp.class в папку classes

   Используется ключ sourcepath, который указывает каталоги, в которых компилятор должен искать иерархию исходных файлов.
    В нашем случае это src. Перепишем строку компиляции:
   javac -d classes -sourcepath src src/first/Example1.java
   переменные среды прописываются чтобы польность не писать путь к исполняющим файлам java и javac в командной строке
   javac -d bin ./src/*
   -d — флаг, после которого следует указать расположение, куда попадут скомпилированные классы. Это очень удобно, так
   как перекладывать, например, 1000 классов — очень трудоемкий процесс.
   bin — название папки.
   ./src/* — расположение исходных файлов. * указывает, что необходимо скомпилировать все файлы.
   Теперь скомпилированные классы появились в папке bin. Для их запуска используется команда java из той же директории,
   также с аргументами:
   java -classpath ./bin BoxMachine
   -classpath — флаг, после которого следует указать местоположение скомпилированных классов. Java будет искать главный
    класс и все сопутствующие именно в этой директории.
   ./bin — название папки, в которой находятся скомпилированные классы.
   BoxMachine — название главного класса. Как и в первом случае, не следует указывать .class, так как это название
   класса, а не файла.

5. Перечислите атрибуты доступа, объясните их действие:

 - Видимый в пакете (стоит по умолчанию и модификатор не требуются).
 - Видимый только для класса (private).
 - Видимый для всех (public).
 - Видимый для пакета и всех подклассов (protected).

6. Что такое пакеты в java-программе, что представляют собой пакеты на диске? Каково соглашение по
   именованию пакетов? Как создать пакет?

    механизм, позволяющий организовать Java классы в пространстве имен
    Имена пакета написаны во всем нижнем регистре, чтобы избежать конфликта с именами классов или интерфейсов
    Префикс уникального имени пакета всегда пишется в нижнем регистре латиницей и должен соответствовать одному из
    доменов высшего уровня, в настоящий момент это com, edu, gov,
    Создать пакет: создать иерархию папок в файловой системе и исходя из этого в файлах java обьявить package относительно
    корневой папки
7. Объясните, какие классы, интерфейсы, перечисления необходимо импортировать в вашу программу, как
  это сделать. Влияет ли импорт пакета на импорт классов и др., лежащего в подпакетах? Какой пакет в Java
  импортируется по умолчанию?

  import java.lang.* (базовые классы импортируются автоматически такие как Object находятся в java.lang) - импорт по умолчанию

8. Объясните различия между терминами “объект” и “ссылка на объект”

    выделяется память с помощью оператора new и создается объект
    переменная которая проинициализированна и есть ссыылка на объект

9. Какие примитивные типы Java вы знаете, как создать переменные примитивных типов? Объясните
   процедуру, по которой переменные примитивных типов передаются в методы как параметры:

   тип название и можно проинициализировать если переменная класса, и обязательно пронициализировать если переменная локальная.
   В Java переменные примитывного типа передаются в метод по значению, те передается копия примитивного значения

10. Каков размер примитивных типов, как размер примитивных типов зависит от разрядности платформы, что
    такое преобразование (приведение) типов и зачем оно необходимо? Какие примитивные типы не приводятся
    ни к какому другому типу.

    byte - 8 бит
    short - 16 бит char -16 бит
    int - 32 бита float - 32 бита
    long - 64 бита double - 64 бита
    boolean не приводится к другим типам и имеет размер int чаще всего
    размер одинаковый независит о платформы

11. Объясните, что такое явное и неявное приведение типов, приведите примеры, когда такое преобразование имеет место:

    неявное приведение типов - расширяющее преобразование те расширяет представление объекта в памяти
    с потерей точности неявное преобразование, когда размер занимаемой памяти тот же но один тип с плавающей точкой другой целочисленный.
    явное с указаием типа в скобках.

12.Что такое литералы в Java-программе, какую классификацию литералов вы знаете, как записываются литералы различных
 видов и типов в Java-программе?

    это примитивные значения. Типы литералов:
    1) числовые:
        - целочисленные :
            1. в двоичной форме с префиксом 0b
            2. в восьмиричной форме начинается с ведущего 0
            3. 16-ричная форма начинается с 0x 0-9 цыфры, 10-15 ,буквы A-F
        - с плавающей точкой
            1. умножение на 10 в степени - double d = 4.05E-13; это 4.05 * десять в минус 13 степени
    2) строковые
    3) символьные
        char c = '\u00F7'
    4) логические true false
    null для объектов

13. Как осуществляется работа с типами при вычислении арифметически выражений в Java?
    тип расширяется автоматически

14. Что такое классы-оболочки, для чего они предназначены? Объясните, что значит: объект класса оболочки – константный объект

    класс который хранит в себе значение примитива.
    константный объект значит что в классе обьекта поля скрыты а методы только на чтение
    Integer a = new Integer(0);   Integer b = new Integer(0);  b = a;   a = 1; b будет равно 0.

15. Объясните разницу между примитивными и ссылочными типами данных. Поясните существующие различия,
    при передаче параметров примитивных и ссылочных типов в методы. Объясните, как константные объекты
    ведут себя при передаче в метод.

    Примитивы всегда имеют значение или значчение по умолчанию.
    ссылочные типы могут иметь значение null
    ссылочные типы хранятся в куче, когда примитивные типы хранятся в стеке
    https://topjava.ru/blog/stack-and-heap-in-java
    https://www.baeldung.com/java-stack-heap
    в метод передается копия, обьект по ссылке на начальный обьект не меняется

16. Поясните, что такое автоупаковка и автораспаковка.

        Это автоматическая инкапсуляция примитивного типа в эквивалентную ему класс-обёртку всякий раз, когда требуется
    объект данного типа.
    Autoboxing происходит:
    При присвоении значения примитивного типа переменной соответствующего класса-обёртки.
    При передаче примитивного типа в параметр метода, ожидающего соответствующий ему класс-обёртку.
        Это преобразование класса-обёртки в соответствующий ему примитивный тип. Если при распаковке класс-обёртка
    был равен null, произойдет исключение java.lang.NullPointerException.
    Unboxing происходит:
    При присвоении экземпляра класса-обёртки переменной соответствующего примитивного типа.
    В выражениях, в которых один или оба аргумента являются экземплярами классов-обёрток (кроме операции == и !=).
    При передаче объекта класса-обёртки в метод, ожидающий соответствующий примитивный тип.

17. Перечислите известные вам арифметические, логические и битовые операторы, определите случаи их
    употребления. Что такое приоритет оператора, как определить, в какой последовательности будут
    выполняться операции в выражении, если несколько из них имеют одинаковый приоритет.
    operator-precedence.png
    при присваивании справа налево , иначе слева направо.

18. Укажите правила выполнения операций с плавающий точкой в Java (согласно стандарту IEEE754). Как
    определить, что результатом вычисления стала бесконечность или нечисло?
    NaN-Infinity.png
    в двоичной системе невозможно точно представить число 0,1
    Для вещественных чисел лучше использовать BigDecimal(для сравнения использовать compareTo() тк  из-за различных
    коэффициентов масштабирования обьекты по equals не будут равны 100.00 и 100.000 not equal)

19. Что такое статический импорт, какие элементы можно импортировать при статическом импорте.
    import static путь к классу.* или поле класса
    статические методы и поля

20. Объясните работу операторов if, switch, while, do-while, for, for-each. Напишите корректные примеры
    работы этих операторов.
    switch(veriable) veriable - char, byte, short, int(их обертки), String, enum

21. Объясните работу оператора instanceof. Что будет результатом работы оператора, если слева от него будет
    стоять ссылка, равная null

    определяет на основании какого класса был создан обьект, возвращает true если в иерархии есть соответствующий класс,
    иначе false
    Оператор instanceof проверяет именно происхождение объекта, а не переменной.
    Cat cat = new MaineCoon(); System.out.println(cat instanceof Cat);  System.out.println(cat instanceof MaineCoon);
true true
    null instanceof Object returns false
